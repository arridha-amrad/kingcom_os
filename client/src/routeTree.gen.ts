/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TransactionsIndexRouteImport } from './routes/transactions/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as DummyIndexRouteImport } from './routes/dummy/index'
import { Route as CartIndexRouteImport } from './routes/cart/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as ProductsSlugRouteImport } from './routes/products/$slug'
import { Route as DummyDemoTanstackQueryRouteImport } from './routes/dummy/demo.tanstack-query'
import { Route as DummyDemoFormSimpleRouteImport } from './routes/dummy/demo.form.simple'
import { Route as DummyDemoFormAddressRouteImport } from './routes/dummy/demo.form.address'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TransactionsIndexRoute = TransactionsIndexRouteImport.update({
  id: '/transactions/',
  path: '/transactions/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const DummyIndexRoute = DummyIndexRouteImport.update({
  id: '/dummy/',
  path: '/dummy/',
  getParentRoute: () => rootRouteImport,
} as any)
const CartIndexRoute = CartIndexRouteImport.update({
  id: '/cart/',
  path: '/cart/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsSlugRoute = ProductsSlugRouteImport.update({
  id: '/products/$slug',
  path: '/products/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const DummyDemoTanstackQueryRoute = DummyDemoTanstackQueryRouteImport.update({
  id: '/dummy/demo/tanstack-query',
  path: '/dummy/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const DummyDemoFormSimpleRoute = DummyDemoFormSimpleRouteImport.update({
  id: '/dummy/demo/form/simple',
  path: '/dummy/demo/form/simple',
  getParentRoute: () => rootRouteImport,
} as any)
const DummyDemoFormAddressRoute = DummyDemoFormAddressRouteImport.update({
  id: '/dummy/demo/form/address',
  path: '/dummy/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/products/$slug': typeof ProductsSlugRoute
  '/admin': typeof AdminIndexRoute
  '/cart': typeof CartIndexRoute
  '/dummy': typeof DummyIndexRoute
  '/products': typeof ProductsIndexRoute
  '/transactions': typeof TransactionsIndexRoute
  '/dummy/demo/tanstack-query': typeof DummyDemoTanstackQueryRoute
  '/dummy/demo/form/address': typeof DummyDemoFormAddressRoute
  '/dummy/demo/form/simple': typeof DummyDemoFormSimpleRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/products/$slug': typeof ProductsSlugRoute
  '/admin': typeof AdminIndexRoute
  '/cart': typeof CartIndexRoute
  '/dummy': typeof DummyIndexRoute
  '/products': typeof ProductsIndexRoute
  '/transactions': typeof TransactionsIndexRoute
  '/dummy/demo/tanstack-query': typeof DummyDemoTanstackQueryRoute
  '/dummy/demo/form/address': typeof DummyDemoFormAddressRoute
  '/dummy/demo/form/simple': typeof DummyDemoFormSimpleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/products/$slug': typeof ProductsSlugRoute
  '/admin/': typeof AdminIndexRoute
  '/cart/': typeof CartIndexRoute
  '/dummy/': typeof DummyIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/transactions/': typeof TransactionsIndexRoute
  '/dummy/demo/tanstack-query': typeof DummyDemoTanstackQueryRoute
  '/dummy/demo/form/address': typeof DummyDemoFormAddressRoute
  '/dummy/demo/form/simple': typeof DummyDemoFormSimpleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/products/$slug'
    | '/admin'
    | '/cart'
    | '/dummy'
    | '/products'
    | '/transactions'
    | '/dummy/demo/tanstack-query'
    | '/dummy/demo/form/address'
    | '/dummy/demo/form/simple'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/products/$slug'
    | '/admin'
    | '/cart'
    | '/dummy'
    | '/products'
    | '/transactions'
    | '/dummy/demo/tanstack-query'
    | '/dummy/demo/form/address'
    | '/dummy/demo/form/simple'
  id:
    | '__root__'
    | '/'
    | '/products/$slug'
    | '/admin/'
    | '/cart/'
    | '/dummy/'
    | '/products/'
    | '/transactions/'
    | '/dummy/demo/tanstack-query'
    | '/dummy/demo/form/address'
    | '/dummy/demo/form/simple'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProductsSlugRoute: typeof ProductsSlugRoute
  AdminIndexRoute: typeof AdminIndexRoute
  CartIndexRoute: typeof CartIndexRoute
  DummyIndexRoute: typeof DummyIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  TransactionsIndexRoute: typeof TransactionsIndexRoute
  DummyDemoTanstackQueryRoute: typeof DummyDemoTanstackQueryRoute
  DummyDemoFormAddressRoute: typeof DummyDemoFormAddressRoute
  DummyDemoFormSimpleRoute: typeof DummyDemoFormSimpleRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transactions/': {
      id: '/transactions/'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof TransactionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dummy/': {
      id: '/dummy/'
      path: '/dummy'
      fullPath: '/dummy'
      preLoaderRoute: typeof DummyIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart/': {
      id: '/cart/'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$slug': {
      id: '/products/$slug'
      path: '/products/$slug'
      fullPath: '/products/$slug'
      preLoaderRoute: typeof ProductsSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dummy/demo/tanstack-query': {
      id: '/dummy/demo/tanstack-query'
      path: '/dummy/demo/tanstack-query'
      fullPath: '/dummy/demo/tanstack-query'
      preLoaderRoute: typeof DummyDemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dummy/demo/form/simple': {
      id: '/dummy/demo/form/simple'
      path: '/dummy/demo/form/simple'
      fullPath: '/dummy/demo/form/simple'
      preLoaderRoute: typeof DummyDemoFormSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dummy/demo/form/address': {
      id: '/dummy/demo/form/address'
      path: '/dummy/demo/form/address'
      fullPath: '/dummy/demo/form/address'
      preLoaderRoute: typeof DummyDemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProductsSlugRoute: ProductsSlugRoute,
  AdminIndexRoute: AdminIndexRoute,
  CartIndexRoute: CartIndexRoute,
  DummyIndexRoute: DummyIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  TransactionsIndexRoute: TransactionsIndexRoute,
  DummyDemoTanstackQueryRoute: DummyDemoTanstackQueryRoute,
  DummyDemoFormAddressRoute: DummyDemoFormAddressRoute,
  DummyDemoFormSimpleRoute: DummyDemoFormSimpleRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
